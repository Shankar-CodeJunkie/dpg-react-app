{"version":3,"sources":["services/api.services.js","components/LoginForm.jsx","components/LoginContainer.jsx","components/S2IForm.jsx","components/S2IContainer.jsx","components/PushImageForm.jsx","components/PushImageContainer.jsx","history.js","components/DeployForm.jsx","components/DeployContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["API_DOMAIN","process","LoginForm","props","state","spinner","submitting","showType","cluster_url","username","password","token","form","React","createRef","submitForm","bind","changeType","usernameInput","setUsernameInputRef","element","passwordInput","setPasswordInputRef","selectedValue","this","setState","event","preventDefault","formData","Promise","resolve","reject","axios","method","url","data","then","res","result","catch","error","loginByCred","current","value","history","push","e","console","log","loginByToken","className","name","onSubmit","$event","action","formAction","ref","f","FormGroup","legendText","TextInput","id","type","labelText","disabled","defaultValue","RadioButtonGroup","defaultSelected","legend","onChange","RadioButton","PasswordInput","Button","Loading","description","small","withOverlay","PureComponent","withRouter","LoginContainer","loading","step","Row","Column","currentStep","S2IForm","git_repo","builder_image","workspace_dir","language","sourceLocation","imageName","buildImageByGit","buildImageByWorkspace","Select","SelectItem","hidden","text","S2IContainer","rel","target","href","PushImageForm","project_name","project","pushImage","PushImageContainer","createBrowserHistory","DeployForm","showAppURL","appURL","deploy","appurl","Tooltip","DeployContainer","App","fallback","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.75a43368.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_DOMAIN = process.env.REACT_APP_API_DOMAIN;\n\nexport function loginByCred(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/login/cred',\n            data: {\n                \"clusterUrl\": formData.cluster_url,\n                \"username\": formData.username,\n                \"password\": formData.password\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'Success') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}\n\nexport function loginByToken(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/login/token',\n            data: {\n                \"clusterUrl\": formData.cluster_url,\n                \"token\": formData.token\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'Success') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}\n\nexport function buildImageByGit(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/packageCode',\n            data: {\n                \"language\": formData.language,\n                \"sourceLocation\": formData.sourceLocation,\n                \"imageName\": formData.imageName\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'Build Success') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}\nexport function buildImageByWorkspace(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/packageCode',\n            data: {\n                \"language\": formData.language,\n                \"sourceLocation\": formData.sourceLocation,\n                \"imageName\": formData.imageName\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'Success') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}\n\nexport function pushImage(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/pushPackage',\n            data: {\n                \"imageName\": formData.imageName,\n                \"project\": formData.project\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'Package push successful') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}\n\nexport function deploy(formData) {\n    return new Promise(function (resolve, reject) {\n        axios({\n            method: 'POST',\n            url: API_DOMAIN + '/deployPackage',\n            data: {\n                \"imageName\": formData.imageName,\n                \"project\": formData.project\n            },\n        }).then(res => {\n            if (res.data && res.data.result && res.data.result === 'App Deployed') {\n                resolve(res.data)\n            } else {\n                reject(res.data)\n            }\n        }).catch(error => {\n            reject({ error });\n        })\n    })\n}","import React, { PureComponent } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport {\n    Button,\n    RadioButton,\n    TextInput,\n    Loading,\n    FormGroup,\n    RadioButtonGroup\n} from 'carbon-components-react';\nimport './scss/login-form.scss'\nimport { loginByCred, loginByToken } from '../services/api.services';\nexport class LoginForm extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinner: false,\n            submitting: false,\n            showType: \"credentials\",\n            cluster_url: \"https://api.amocpdev.os.fyre.ibm.com:6443\",\n            username: \"kubeadmin\",\n            password: \"sLhMi-UuL3P-QUdy7-mipBg\",\n            token: \"umtIY8j5JxR4epPhdgQYLjgghmZRIq6NtgyjQoXx69g\"\n        };\n        this.form = React.createRef();\n        this.submitForm = this.submitForm.bind(this);\n        this.changeType = this.changeType.bind(this);\n\n        this.usernameInput = null;\n        this.setUsernameInputRef = element => {\n            this.usernameInput = element;\n        };\n        this.passwordInput = null;\n        this.setPasswordInputRef = element => {\n            this.passwordInput = element;\n        };\n        this.cluster_url = React.createRef();\n        this.username = React.createRef();\n        this.password = React.createRef();\n        this.token = React.createRef();\n\n    }\n    componentDidMount() {\n\n    }\n    changeType(selectedValue) {\n        this.setState({\n            showType: selectedValue\n        })\n    }\n    formAction() {\n\n    }\n    submitForm(event) {\n        event.preventDefault();\n        this.setState({\n            spinner: true\n        })\n        let formData = {}\n        if (this.state.showType === 'credentials') {\n            formData = {\n                cluster_url: this.cluster_url.current.value,\n                username: this.username.current.value,\n                password: this.password.current.value\n            }\n            loginByCred(formData).then((res) => {\n                this.props.history.push(\"/buildimage\");\n            }).catch((e) => {\n                this.setState({\n                    spinner: false\n                })\n                console.log(e)\n            });\n        } else if (this.state.showType === 'token') {\n            formData = {\n                cluster_url: this.cluster_url.current.value,\n                token: this.token.current.value\n            }\n            loginByToken(formData).then((res) => {\n                this.props.history.push(\"/buildimage\");\n            }).catch((e) => {\n                this.setState({\n                    spinner: false\n                })\n                console.log(e)\n            });\n        }\n    }\n    render() {\n        const {\n            submitting,\n            showType,\n            cluster_url,\n            username,\n            password,\n            token\n        } = this.state;\n        return (\n            <div className={`login-form`}>\n                <form\n                    name=\"loginForm\"\n                    method=\"POST\"\n                    className={`ibm-row-form`}\n                    onSubmit={($event) => { return this.submitForm($event) }}\n                    action={this.formAction()}\n                    ref={f => (this.form = f)}\n                >\n                    <div className={`fields-container`}>\n                        <div className={`heading-container`}>\n                            <h1 className=\"form-heading ibm-h2\">Login to OCP Cluster</h1>\n                        </div>\n                        <FormGroup legendText=\"\">\n                            <TextInput\n                                id={`cluster_url`}\n                                name={`cluster_url`}\n                                type={`text`}\n                                labelText={'Cluster URL'}\n                                disabled={submitting}\n                                ref={this.cluster_url}\n                                defaultValue={cluster_url}\n                            />\n                            <RadioButtonGroup\n                                name=\"cred_token\"\n                                defaultSelected=\"credentials\"\n                                legend=\"Group Legend\"\n                                onChange={this.changeType}>\n                                <RadioButton\n                                    id=\"credentials\"\n                                    name=\"cred_token\"\n                                    labelText=\"Credentials\"\n                                    value=\"credentials\" />\n                                <RadioButton\n                                    id=\"token\"\n                                    name=\"cred_token\"\n                                    labelText=\"Token\"\n                                    value=\"token\" />\n                            </RadioButtonGroup>\n                        </FormGroup>\n                        <FormGroup legendText=\"\">\n                            {showType === 'credentials' &&\n                                <>\n                                    <TextInput\n                                        id={`username`}\n                                        name={`username`}\n                                        type={`text`}\n                                        labelText={'Username'}\n                                        disabled={submitting}\n                                        ref={this.username}\n                                        defaultValue={username}\n                                    />\n                                    <TextInput.PasswordInput\n                                        id={`password`}\n                                        name={`password`}\n                                        labelText={'Password'}\n                                        disabled={submitting}\n                                        ref={this.password}\n                                        defaultValue={password}\n                                    />\n                                </>\n                            }\n                            {showType === 'token' &&\n                                <TextInput.PasswordInput\n                                    id={`token`}\n                                    name={`token`}\n                                    labelText={'Token'}\n                                    disabled={submitting}\n                                    ref={this.token}\n                                    defaultValue={token}\n                                />\n                            }\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"some-class\" >\n                            Login\n                        </Button>\n                    </div>\n                </form>\n                {\n                    this.state.spinner &&\n                    <Loading\n                        description='Loading...'\n                        small={false}\n                        withOverlay={true}\n                    />\n                }\n            </div >\n        )\n    }\n}\n\nexport default withRouter(LoginForm)\n","import React, { PureComponent } from 'react';\nimport { Column, Row } from 'carbon-components-react';\nimport LoginForm from './LoginForm';\nimport './scss/login-container.scss'\n\nclass LoginContainer extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n    render() {\n        const { step } = this.state;\n        return (\n            <div className={`outer`}>\n                <div className={`middle`}>\n                    <div className={`login-inner`}>\n                        <div className={`login-container`}>\n                            <Row>\n                                <Column className={`form-area`}>\n                                    <LoginForm\n                                        currentStep={step}\n                                    />\n                                </Column>\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default LoginContainer;","import React, { PureComponent } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport {\n    Button,\n    RadioButton,\n    TextInput,\n    Loading,\n    FormGroup,\n    RadioButtonGroup,\n    Select,\n    SelectItem,\n} from 'carbon-components-react';\nimport './scss/login-form.scss'\nimport { buildImageByWorkspace, buildImageByGit } from '../services/api.services';\n\nexport class S2IForm extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinner: false,\n            submitting: false,\n            showType: \"git_repo\",\n            git_repo: \"https://github.com/mondalabhishek/express-hello-world\",\n            builder_image: \"nodejs\",\n            workspace_dir: \"\",\n            name: \"dpg-node-hello\",\n        };\n        this.form = React.createRef();\n        this.submitForm = this.submitForm.bind(this);\n        this.changeType = this.changeType.bind(this);\n        this.git_repo = React.createRef();\n        this.workspace_dir = React.createRef();\n        this.builder_image = React.createRef();\n        this.name = React.createRef();\n\n    }\n    componentDidMount() {\n\n    }\n    changeType(selectedValue) {\n        this.setState({\n            showType: selectedValue\n        })\n    }\n    formAction() {\n\n    }\n    submitForm(event) {\n        event.preventDefault();\n        this.setState({\n            spinner: true\n        })\n        let formData = {}\n        if (this.state.showType === 'git_repo') {\n            formData = {\n                sourceLocation: this.git_repo.current.value,\n                language: this.builder_image.current.value,\n                imageName: this.name.current.value\n            }\n            buildImageByGit(formData).then((res) => {\n                this.props.history.push(\"/pushimage\");\n            }).catch((e) => {\n                this.setState({\n                    spinner: false\n                })\n                console.log(e)\n            });\n        } else if (this.state.showType === 'workspace') {\n            formData = {\n                cluster_url: this.cluster_url.current.value,\n                token: this.token.current.value\n            }\n            buildImageByWorkspace(formData).then((res) => {\n                this.props.history.push(\"/pushimage\");\n            }).catch((e) => {\n                this.setState({\n                    spinner: false\n                })\n                console.log(e)\n            });\n        }\n    }\n    render() {\n        const {\n            submitting,\n            showType,\n            git_repo,\n            workspace_dir,\n            name\n        } = this.state;\n        return (\n            <div className={`login-form`}>\n                <form\n                    name=\"loginForm\"\n                    method=\"POST\"\n                    className={`ibm-row-form`}\n                    onSubmit={($event) => { return this.submitForm($event) }}\n                    action={this.formAction()}\n                    ref={f => (this.form = f)}\n                >\n                    <div className={`fields-container`}>\n                        <div className={`heading-container`}>\n                            <h1 className=\"form-heading ibm-h2\">Source to Image</h1>\n                        </div>\n                        <FormGroup legendText=\"Input Source\">\n                            <RadioButtonGroup\n                                name=\"input_source\"\n                                defaultSelected=\"git_repo\"\n                                legend=\"Group Legend\"\n                                onChange={this.changeType}>\n                                <RadioButton\n                                    id=\"git_repo\"\n                                    name=\"input_source\"\n                                    labelText=\"Git Repository\"\n                                    value=\"git_repo\" />\n                                <RadioButton\n                                    id=\"workspace\"\n                                    name=\"input_source\"\n                                    labelText=\"Workspace Directory\"\n                                    value=\"workspace\" />\n                            </RadioButtonGroup>\n                        </FormGroup>\n                        <FormGroup legendText=\"\">\n                            {showType === 'git_repo' &&\n                                <TextInput\n                                    id={`git_repo_url`}\n                                    name={`git_repo_url`}\n                                    type={`text`}\n                                    labelText={'Git Repository URL'}\n                                    disabled={submitting}\n                                    ref={this.git_repo}\n                                    defaultValue={git_repo}\n                                />\n                            }\n                            {showType === 'workspace' &&\n                                <TextInput\n                                    id={`workspace_dir`}\n                                    name={`workspace_dir`}\n                                    type={`text`}\n                                    labelText={'Workspace Directory'}\n                                    disabled={submitting}\n                                    ref={this.workspace_dir}\n                                    defaultValue={workspace_dir}\n                                />\n                            }\n                            <Select className=\"select-field\"\n                                labelText=\"Builder Image\"\n                                id=\"builder_image\"\n                                name=\"builder_image\"\n                                defaultValue=\"nodejs\"\n                                ref={this.builder_image}\n                            >\n                                <SelectItem\n                                    disabled\n                                    hidden\n                                    value=\"\"\n                                    text=\"Choose an option\"\n                                />\n                                <SelectItem value=\"java\" text=\"Java\" />\n                                <SelectItem value=\"nodejs\" text=\"NodeJS\" />\n                                <SelectItem value=\"dotnet\" text=\"Dotnet\" />\n                                <SelectItem value=\"golang\" text=\"Golang\" />\n                                <SelectItem value=\"httpd\" text=\"Httpd\" />\n                                <SelectItem value=\"nginx\" text=\"Nginx\" />\n                                <SelectItem value=\"perl\" text=\"Perl\" />\n                                <SelectItem value=\"php\" text=\"PHP\" />\n                                <SelectItem value=\"python\" text=\"Python\" />\n                                <SelectItem value=\"ruby\" text=\"Ruby\" />\n\n                            </Select>\n\n                            <TextInput\n                                id={`name`}\n                                name={`name`}\n                                type={`text`}\n                                labelText={'Name'}\n                                disabled={submitting}\n                                ref={this.name}\n                                defaultValue={name}\n                            />\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"some-class\" >\n                            Build Image\n                        </Button>\n                    </div>\n                </form>\n                {\n                    this.state.spinner &&\n                    <Loading\n                        description='Loading...'\n                        small={false}\n                        withOverlay={true}\n                    />\n                }\n            </div >\n        )\n    }\n}\n\nexport default withRouter(S2IForm)\n","import React, { PureComponent } from 'react';\nimport { Column, Row } from 'carbon-components-react';\nimport S2IForm from './S2IForm';\nimport './scss/login-container.scss'\n\nclass S2IContainer extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n    render() {\n        return (\n            <div className={`outer`}>\n                <div className={`middle`}>\n                    <div className={`s2i-inner`}>\n                        <div className={`s2i-container`}>\n                            <Row>\n                                <Column>\n                                    <div className=\"info-block\">\n                                        <h2 className=\"left-title\">Source-To-Image (S2I)</h2>\n                                        <p>\n                                            Source-to-Image (S2I) is a toolkit and workflow for building reproducible container images from source code. S2I produces ready-to-run images by injecting source code into a container image and letting the container prepare that source code for execution.\n                                        </p>\n                                        <p>\n                                            For more information on S2I refer - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/openshift/source-to-image\">https://github.com/openshift/source-to-image</a>\n                                        </p>\n                                        <p>Try out IBM Open Labs for Hands-on experience - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/openlabs/openshift\">IBM Open Labs for Openshift</a></p>\n                                        <p>\n                                            Explore Code patterns on S2I - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/patterns/app-modernization-s2i-openshift/\">https://developer.ibm.com/patterns/app-modernization-s2i-openshift</a>\n                                        </p>\n                                        <p>Sample PHP S2I Openshift - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/patterns/app-modernization-php-s2i-openshift/\">https://developer.ibm.com/patterns/app-modernization-php-s2i-openshift/</a>\n                                        </p>\n                                        <p>Source-to-image Video - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/videos/source-to-image-s2i-openshift/\">https://developer.ibm.com/videos/source-to-image-s2i-openshift/</a>\n                                        </p>\n                                    </div>\n                                </Column>\n                                <Column className={`form-area`}>\n                                    <S2IForm />\n                                </Column>\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default S2IContainer;","import React, { PureComponent } from 'react'\nimport {\n    Button,\n    TextInput,\n    Loading,\n    FormGroup\n} from 'carbon-components-react';\nimport './scss/login-form.scss'\nimport { withRouter } from 'react-router-dom';\nimport { pushImage } from '../services/api.services';\n\nexport class PushImageForm extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinner: false,\n            submitting: false,\n            imageName: 'dpg-node-hello',\n            project_name: 'dpg-demo'\n        };\n        this.form = React.createRef();\n        this.submitForm = this.submitForm.bind(this);\n        this.project_name = React.createRef();\n    }\n    componentDidMount() {\n        \n    }\n    formAction() {\n\n    }\n    submitForm(event) {\n        event.preventDefault();\n        this.setState({\n            spinner: true\n        })\n        let formData = {\n            imageName: this.state.imageName,\n            project: this.project_name.current.value\n        }\n        pushImage(formData).then((res) => {\n            this.setState({\n                spinner: false\n            })\n            this.props.history.push(\"/deploy\");\n        }).catch((e) => {\n            this.setState({\n                spinner: false\n            })\n            console.log(e)\n        });\n    }\n    render() {\n        const {\n            submitting,\n            project_name\n        } = this.state;\n        return (\n            <div className={`login-form`}>\n                <form\n                    name=\"loginForm\"\n                    method=\"POST\"\n                    className={`ibm-row-form`}\n                    onSubmit={($event) => { return this.submitForm($event) }}\n                    action={this.formAction()}\n                    ref={f => (this.form = f)}\n                >\n                    <div className={`fields-container`}>\n                        <div className={`heading-container`}>\n                            <h1 className=\"form-heading ibm-h2\">Push image to OCP Registry</h1>\n                        </div>\n                        <FormGroup legendText=\"\">\n                            <TextInput\n                                id={`project_name`}\n                                name={`project_name`}\n                                type={`text`}\n                                labelText={'Project Name'}\n                                disabled={submitting}\n                                ref={this.project_name}\n                                defaultValue={project_name}\n                            />\n                        </FormGroup>\n                        <Button type=\"submit\" className=\"some-class\" >\n                            Push\n                        </Button>\n                    </div>\n                </form>\n                {\n                    this.state.spinner &&\n                    <Loading\n                        description='Loading...'\n                        small={false}\n                        withOverlay={true}\n                    />\n                }\n            </div >\n        )\n    }\n}\n\nexport default withRouter(PushImageForm)\n","import React, { PureComponent } from 'react';\nimport { Column, Row } from 'carbon-components-react';\nimport PushImageForm from './PushImageForm';\nimport './scss/login-container.scss'\n\nclass PushImageContainer extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n    render() {\n        return (\n            <div className={`outer`}>\n                <div className={`middle`}>\n                    <div className={`pushimage-inner`}>\n                        <div className={`pushimage-container`}>\n                            <Row>\n                                <Column>\n                                    <div className=\"info-block\">\n                                        <h2 className=\"left-title\">OpenShift Container Registry (OCR)</h2>\n                                        <p>\n                                            OpenShift Container Platform provides an integrated container registry called OpenShift Container Registry (OCR) that adds the ability to automatically provision new image repositories on demand. This provides users with a built-in location for their application builds to push the resulting images.\n                                        </p>\n                                    </div>\n                                </Column>\n                                <Column className={`form-area`}>\n                                    <PushImageForm />\n                                </Column>\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default PushImageContainer;","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();","import React, { PureComponent } from 'react'\nimport {\n    Button,\n    TextInput,\n    Loading,\n    FormGroup,\n    Tooltip\n} from 'carbon-components-react';\nimport './scss/login-form.scss'\nimport { withRouter } from 'react-router-dom';\nimport { deploy } from '../services/api.services';\n\nexport class DeployForm extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            spinner: false,\n            submitting: false,\n            imageName: 'dpg-node-hello',\n            project_name: 'dpg-demo',\n            showAppURL: false,\n            appURL: ''\n        };\n        this.form = React.createRef();\n        this.submitForm = this.submitForm.bind(this);\n        this.project_name = React.createRef();\n    }\n    componentDidMount() {\n\n    }\n    formAction() {\n\n    }\n    submitForm(event) {\n        event.preventDefault();\n        this.setState({\n            spinner: true\n        })\n        let formData = {\n            imageName: this.state.imageName,\n            project: this.project_name.current.value\n        }\n        deploy(formData).then((res) => {\n            this.setState({\n                spinner: false,\n                showAppURL: true,\n                appURL: res.appurl\n            })\n            // this.props.history.push(\"/pushimage\");\n\n        }).catch((e) => {\n            this.setState({\n                spinner: false\n            })\n            console.log(e)\n        });\n    }\n    render() {\n        const {\n            submitting,\n            project_name,\n            showAppURL,\n            appURL\n        } = this.state;\n        return (\n            <div className={`login-form`}>\n                {showAppURL &&\n                    <div className={`ibm-row-form`}>\n                        <div className={`fields-container`}>\n                            <div className={`heading-container`}>\n                                <h1 className=\"form-heading ibm-h2\">Application Deployed</h1>\n                            </div>\n                            <div className=\"deploy-url\">\n                                <div className=\"deploy-url-label\">\n                                    <div className=\"deploy-app-title\">Deployed App URL</div>\n                                    <Tooltip>\n                                        Might take few minutes for the URL to get activated, click the link after few minutes.\n                                    </Tooltip>\n                                </div><a href={appURL} rel=\"noopener noreferrer\" target=\"_blank\">{appURL}</a>\n                            </div>\n                        </div>\n                    </div>\n                }\n                {!showAppURL &&\n                    <form\n                        name=\"loginForm\"\n                        method=\"POST\"\n                        className={`ibm-row-form`}\n                        onSubmit={($event) => { return this.submitForm($event) }}\n                        action={this.formAction()}\n                        ref={f => (this.form = f)}\n                    >\n                        <div className={`fields-container`}>\n                            <div className={`heading-container`}>\n                                <h1 className=\"form-heading ibm-h2\">Deploy application</h1>\n                            </div>\n                            <FormGroup legendText=\"\">\n                                <TextInput\n                                    id={`project_name`}\n                                    name={`project_name`}\n                                    type={`text`}\n                                    labelText={'Project Name'}\n                                    disabled={submitting}\n                                    ref={this.project_name}\n                                    defaultValue={project_name}\n                                />\n                            </FormGroup>\n                            <Button type=\"submit\" className=\"some-class\" >\n                                Deploy\n                        </Button>\n                        </div>\n                    </form>\n                }\n                {\n                    this.state.spinner &&\n                    <Loading\n                        description='Loading...'\n                        small={false}\n                        withOverlay={true}\n                    />\n                }\n            </div >\n        )\n    }\n}\n\nexport default withRouter(DeployForm)\n","import React, { PureComponent } from 'react';\nimport { Column, Row } from 'carbon-components-react';\nimport './scss/login-container.scss'\nimport { DeployForm } from './DeployForm';\n\nclass DeployContainer extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        }\n    }\n    render() {\n        return (\n            <div className={`outer`}>\n                <div className={`middle`}>\n                    <div className={`pushimage-inner`}>\n                        <div className={`pushimage-container`}>\n                            <Row>\n                                <Column>\n                                    <div className=\"info-block\">\n                                        <h2 className=\"left-title\">Deploying an application on OpenShift</h2>\n                                        <p>\n                                            For more information refer - <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://docs.openshift.com/container-platform/4.5/applications/application_life_cycle_management/creating-applications-using-cli.html\">OpenShift - Create Application using CLI</a>\n                                        </p>\n                                        <p>Explore Code Patterns<br/><a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/technologies/containers/patterns/deploy-to-openshift-4-redhat-universal-base-image/\">Deploy to OpenShift 4</a><br />\n                                            <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://developer.ibm.com/tutorials/deploy-python-app-to-openshift-cluster-source-to-image/\">Deploy Python App to OpenShift</a></p>\n                                    </div>\n                                </Column>\n                                <Column className={`form-area`}>\n                                    <DeployForm />\n                                </Column>\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default DeployContainer;","import React, { Suspense } from 'react';\nimport {\n  Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './app.scss';\nimport LoginContainer from './components/LoginContainer';\nimport { Loading } from 'carbon-components';\nimport S2IContainer from './components/S2IContainer';\nimport PushImageContainer from './components/PushImageContainer';\nimport history from \"./history\";\nimport DeployContainer from './components/DeployContainer';\nfunction App() {\n  return (\n    <Router history={history}>\n      <div className=\"app-container\">\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <LoginContainer />\n            </Route>\n            <Route exact path=\"/buildimage\">\n              <S2IContainer />\n            </Route>\n            <Route exact path=\"/pushimage\">\n              <PushImageContainer />\n            </Route>\n            <Route exact path=\"/deploy\">\n              <DeployContainer />\n            </Route>\n          </Switch>\n        </Suspense>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('login-root-container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}